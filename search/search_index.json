{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"overview/","title":"IBM Cloud MCP Servers","text":"<p>This project contains MCP Servers for IBM Cloud which provide an interface layer between AI assistants and IBM Cloud services. This README details how to install, build, configure, and run the MCP Server(s) for development and testing.</p>"},{"location":"overview/#overview","title":"Overview","text":"<p>The core MCP server implementation for IBM Cloud is built directly into the IBM Cloud CLI native binaries.</p> <p>All MCP features are provided as EXPERIMENTAL features at this time.</p> <p>There are two runtime scenarios supported:</p> <ol> <li>Local install - Core MCP Server - Configure any MCP Host Application (e.g. Claude, VSCode, Cursor, Cline, mcp-cli) to use IBM Cloud CLI as an MCP server.  This scenario involves installing the IBM Cloud CLI locally and then updating the host application's JSON MCP configuration settings to use the IBM Cloud CLI in MCP mode and specifying <code>stdio</code> with the <code>--mcp-transport</code> parameter.</li> <li>Containerized MCP Servers - Use the Containers provided in the <code>/src</code> dir to build fit-for-purpose containerized versions of the IBM Cloud MCP Server which can be deployed on any container runtime (e.g. podman, docker, IBM Cloud Code Engine, Redhat OpenShift, Kubernetes) to run as an MCP Remote server (specify a valid HTTP SSE URL with the <code>--mcp-transport</code> parameter).  This scenario involves building the container file, providinging environment variables to configure the appropriate tools to be exposed via MCP, and securely configuring the credentials to be used for the container. </li> </ol>"},{"location":"overview/#local-install-core-mcp-server-and-plugin-modules","title":"\ud83d\udcbb Local Install - Core MCP Server and Plugin Modules","text":""},{"location":"overview/#dont-have-ibm-cloud-cli-install-it","title":"Don't have IBM Cloud CLI? --&gt; Install it!","text":"<p>Simply install the IBM Cloud CLI--that's all you need!</p>"},{"location":"overview/#already-have-ibm-cloud-cli-check-to-see-if-you-have-mcp-features","title":"Already have IBM Cloud CLI? --&gt; Check to see if you have MCP features","text":"<p>If you already have the IBM Cloud CLI installed, check to see if MCP features are available:</p> <pre><code>ibmcloud --help\n</code></pre> <p>If you already have the MCP feature, you will see the following section near the bottom of the output:</p> <pre><code>MCP OPTIONS:\n  --mcp-transport      [EXPERIMENTAL] Specify the transport to start the MCP server. Valid options are `stdio` or a valid `HTTP SSE URL`.\n  --mcp-tools          [EXPERIMENTAL] Specifies an optional comma-delimited list of commands to expose as MCP tools.\n  --mcp-allow-write    [EXPERIMENTAL] Allows write operations for tasks such as creating a resource.\n</code></pre> <p>If you don't have the MCP feature, update with:</p> <pre><code>ibmcloud update\nibmcloud --help\n</code></pre> <p>Verify that the <code>MCP OPTIONS</code> are available as above and proceed with configuring your host application to use the IBM Cloud MCP Server (proceed to the <code>Usage</code> section below).</p>"},{"location":"overview/#containerized-ibmcloud-mcp-servers","title":"\ud83d\udce6 Containerized IBMCloud MCP Servers","text":"<p>Containerfiles and Makefiles for building IBM Cloud MCP Server containers are located in directories under the <code>/src</code> folder.</p> <p>You can also use the IBM Cloud MCP Server Containerized installation instead of the Local Install steps in the previous section if you have <code>podman</code>, <code>docker</code> or similar container runtime installed locally.</p> <p>Get started using containerized IBM Cloud MCP Servers with the Core MCP Server</p>"},{"location":"overview/#usage-local-installs","title":"\ud83e\udd0f\ud83c\udffb Usage (Local Installs)","text":"<ol> <li>Obtain an IBM Cloud API key with minimal permissions for testing.   This should preferably be a service id api-key rather than user api-key, to restrict access privileges to only areas of IBM Cloud that you will be testing with the MCP server.\u00a0For the name of the service id, you can use the name of a fictional platform engineering agent like, \u201c-network-engineer\u201d or \u201c-account-manager\u201d.  Then create an access group that assigns your new service id with the restricted access permissions that you want to allow the simulated agent to use. For more information consult the IBM Cloud documentation. <li>Find the path to your IBM Cloud CLI binary:</li> <pre><code>where ibmcloud\n</code></pre> <ol> <li>Log in:</li> </ol> <pre><code>ibmcloud login --apikey &lt;your-api-key&gt;\n</code></pre> <ol> <li>Set up a host app like mcp-cli and configure the MCP json for the host app to point to the IBM Cloud CLI binary and allowed tools:</li> </ol> <p>TIP: tool names follow the command namespaces in the IBM Cloud CLI. For example, the namespace <code>resource_groups</code> maps to the CLI command <code>ibmcloud resource groups</code></p> <pre><code>{\n  \"mcpServers\": {\n    \"ibmcloud\": {\n      \"command\": \"/path/to/ibmcloud\",  \n      \"args\": [\n        \"--mcp-transport\", \"stdio\",\n        \"--mcp-tools\", \"resource_groups,target,MORE COMMANDS HERE THAT LIST AND VIEW RESOURCES\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"overview/#safe-mode-secure-by-default","title":"\ud83d\udee1\ufe0f Safe mode -- Secure by default","text":"<p>The default configuration of IBM Cloud MCP Server will run in Safe Mode which will not allow tools which make changes to IBM Cloud resources to be invoked via MCP.  To override this default behavior, use the <code>--mcp-allow-write</code> argument in the mcp configuration, eg.:</p> <pre><code>{\n  \"mcpServers\": {\n    \"ibmcloud\": {\n      \"command\": \"/path/to/ibmcloud\",\n      \"args\": [\n        \"--mcp-transport\", \"stdio\",\n        \"--mcp-allow-write\",\n        \"--mcp-tools\", \"resource_groups,target,ADD COMMANDS THAT CREATE UPDATE OR DELETE RESOURCES\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"overview/#project-directory-structure","title":"Project Directory Structure","text":"<p>The repository is organized as follows:</p> <pre><code>docs/                   # Website documentation\nsrc/                    # IBM Cloud MCP Server containers\n  core/                 # MCP Server for IBM Cloud core tools\n  serverless/           # MCP Server container configurations for Serverless computing on IBM Cloud using Code Engine\n  _MODULES_/            # MCP Server container configurations for other IBM Cloud services\n</code></pre> <ul> <li>docs/ is reserved for future website templates.</li> <li>src/ contains scripts to build fit-for purpose MCP Server containers</li> <li>src/core contains all files related to the IBM Cloud MCP Server container, including build scripts and documentation.</li> <li>core/.env.example and core/.env.ce.example provide templates for required environment variables.</li> <li>core/start.sh is the script executed when the container starts.</li> </ul> <p>MCP Server container configurations are provided for each each major IBM Cloud subsystem withing the <code>/src</code> directory. </p>"},{"location":"overview/#openai-and-llm-access","title":"OpenAI and LLM Access","text":"<ul> <li>Add <code>OPENAI_API_KEY</code> to your <code>.env</code>.  See template <code>.env</code> files in the <code>/src/core</code> directory.</li> <li>Optionally, configure Ollama for local model testing.</li> </ul>"},{"location":"overview/#running-mcp-cli","title":"Running mcp-cli","text":"<ol> <li>Install <code>uv</code>: https://docs.astral.sh/uv/getting-started/installation/</li> <li>Install mcp-cli</li> <li>Setup and run <code>mcp-cli</code>: Make sure it works with one of the basic MCP server examples and an LLM provider like OpenAI</li> <li>Edit <code>server_config.json</code> to include ibmcloud (see above examples).</li> <li>Restart <code>mcp-cli</code>.  Type <code>/tools</code>. The IBM Cloud tools you configured should be listed.</li> <li>Type a prompt, eg. \"List resource groups\" or \"Target the xxx resource group\".  If you have enabled <code>--mcp-allow-write</code> mode, you can try \"Create a resource group named 'mcp-test'\".</li> </ol>"},{"location":"overview/#llm-requirements-limitations","title":"\ud83e\udde0 LLM Requirements &amp; Limitations","text":"<ul> <li>Only LLMs that support tool calling work with MCP.</li> <li>LLM context window sizes vary and can affect results, including the ability to use multiple tools within a conversation.</li> <li>Limit tools exposed to 20\u201330 per session. MCP injects tool metadata into LLM context.</li> </ul>"},{"location":"overview/#mcp-host-applications","title":"\ud83d\udda5\ufe0f MCP Host Applications","text":"<p>The IBM Cloud MCP features have been used successfully with the following MCP-compliant apps. However, any MCP-compliant host application should work, but YMMV:</p> <ul> <li>VSCode</li> <li>mcp-cli</li> <li>Cline</li> <li>Claude desktop</li> <li>Vim + mcphub</li> <li>Cursor</li> </ul>"},{"location":"overview/#important-security-considerations","title":"\ud83d\udea8 Important Security Considerations \ud83d\udea8","text":"<p>There are common security vulnerabilities which also apply when using MCP that you should mitigate appropriately. For example:</p> <ul> <li> <p>Follow the principle of least priviledge:  When configuring access policies for the service identity/IBMCLOUD_API_KEY, mitigate attacks by ensuring that your agents/host applications and MCP servers can only access resources that are allowed for the agent\u2019s responsibility and no more.</p> </li> <li> <p>Zero trust: Secure your MCP server software supply chain--only use MCP servers from trusted sources (mitigate where possible with standards like CycloneDX SBOM)</p> </li> <li> <p>Secrets management: Never place secrets in your mcp.json config file.  Use appropriate secret managers, and use .env files as intended.</p> </li> <li> <p>Prevent unintended data leaks:  </p> </li> <li> <p>MCP Server To/From Model: Data will flow back to LLM provider/model hosting locations.  Make sure these sites are trusted and secure.</p> </li> <li> <p>MCP Server To/From other Agents: With multi-agent systems that have agents which use MCP, tasks may be delegated by LLM to other agents eg. Planner/Router/Director/Supervisor agents using A2A or ACP.  Since data is returned from MCP servers to LLM\u2019s, LLM\u2019s may use this data as input to further tasks that are sent to other agents.  Artifact output of your agents may be sent to other agents or humans via different channels (eg. push notifications, event streams).</p> </li> <li> <p>MCP Server To/From other MCP Servers configured in the same agent or host application.  Data returned from MCP Servers gets passed back to the LLM for further processing.  The LLM may use this data as input to other MCP Servers it has access to via the host application, potentially sending the data into tools that provide access into other systems.  </p> </li> <li> <p>Monitor all data flows for potential data leaks. Tools like Jaeger, OpenTelemetry and security monitors configured on your agent runtimes can be used to help detect threats. </p> </li> </ul>"},{"location":"overview/#feedback","title":"\ud83d\udde3\ufe0f Feedback","text":"<p>We would love to hear your feedback on these new features through Issues in this repo.</p>"},{"location":"servers/cloud-automation/","title":"IBMCloud MCP Server - Cloud Automation","text":"<p>This project provides a Model Context Protocol (MCP) server with tools for cloud automation services on IBM Cloud including Projects, Schematics and Deployable Architectures</p>"},{"location":"servers/cloud-automation/#configurations","title":"\u2699\ufe0f Configurations","text":"<p>The following example MCP configurations can be found in the <code>configs</code> folder to help get started with code engine use cases:</p> <ul> <li>mcp.iac.json - Tools for working with Cloud Automation, including Projects, Deployable Architectures, Private Catalogs and Schematics (Terraform/Ansible service).</li> </ul> <p>Each of the above configurations also includes the following essential tools:</p> <ul> <li><code>assist</code> - Detailed IBM Cloud Assistance \"Assist me with IBMCLOUD_TOPIC...\"</li> <li><code>resource-groups</code> - Getting lists of the available resource groups</li> <li><code>catalog_locations</code> - Getting available regions</li> <li><code>target</code> - Change the account, resource group, region or cloud API endpoint being used as the current working context for tools.</li> </ul>"},{"location":"servers/cloud-automation/#prompts","title":"\ud83d\udde3\ufe0f Prompts","text":"<p>The MCP Prompt feature is not currently implemented in the IBM Cloud MCP Servers, however, here are some prompts that you can  use to get started using the tools:</p>"},{"location":"servers/cloud-automation/#cloud-automation","title":"\ud83e\udd16 Cloud Automation","text":"<ul> <li>\ud83d\udde3\ufe0f What projects are in this account?</li> <li>\ud83d\udde3\ufe0f Create a new project, \"<code>PROJECT_NAME</code>\".</li> <li>\ud83d\udde3\ufe0f List the environments in project, \"<code>PROJECT_NAME</code>\".</li> <li>\ud83d\udde3\ufe0f Create new \"dev\", \"test\" and \"prod\" environments in <code>PROJECT_NAME</code>.</li> <li>\ud83d\udde3\ufe0f List the configurations in project, \"<code>PROJECT_NAME</code>\".</li> <li>\ud83d\udde3\ufe0f List the configuration version for the configuration, <code>CONFIG_ID</code>.</li> <li>\ud83d\udde3\ufe0f List all the deployable architectures in all catalogs</li> <li>\ud83d\udde3\ufe0f Show me detailed deployment information for the XYZ deployable architectures in the Community Registry catalog</li> <li> <p>\ud83d\udde3\ufe0f Select the <code>CODE_ENGINE_PROJECT_NAME</code> project to work with</p> </li> <li> <p>\ud83d\udea7 TBD - WORK IN PROGRESS \ud83d\udea7 </p> </li> <li>\ud83d\udde3\ufe0f What input values still need to be specified before I can deploy configuration <code>CONFIG_ID</code>?</li> <li>\ud83d\udde3\ufe0f Validate the <code>CONFIG_ID</code> configuration.</li> <li>\ud83d\udde3\ufe0f View the validation logs for <code>CONFIG_ID</code></li> <li>\ud83d\udde3\ufe0f Deploy <code>CONFIG_ID</code></li> <li>\ud83d\udde3\ufe0f Find errors in the deployment logs for project configurations.</li> <li>\ud83d\udde3\ufe0f What can I try to resolve these deployment errors?</li> </ul>"},{"location":"servers/cloud-automation/#common","title":"Common","text":"<ul> <li>\ud83d\udde3\ufe0f Assist me with <code>IBM_CLOUD_TOPIC</code></li> <li>\ud83d\udde3\ufe0f What resource groups are in my account?</li> <li>\ud83d\udde3\ufe0f Target the <code>RESOURCE_GROUP_NAME</code> resource group</li> </ul> <p>NOTE: The above common commands are from the core set of tools and included in the iac configuration examples above.  There are many other core commands for working with access, accounts, users, services, resource searching, etc. that can be used simply by adding the tool names to the config.</p>"},{"location":"servers/cloud-automation/#prerequisites","title":"\ud83e\uddfe Prerequisites","text":"<p>To build, run, and deploy this project, you will need the following installed:</p> <ul> <li><code>make</code></li> <li>Containerization tool: <code>podman</code> or <code>docker</code></li> <li><code>curl</code> (for testing)</li> <li><code>hadolint</code> (for linting Containerfiles)</li> <li><code>dockle</code> (for linting container images)</li> <li><code>trivy</code> (for scanning container images for vulnerabilities)</li> <li>IBM Cloud CLI with <code>container-registry</code> and <code>container-service</code> plugins</li> </ul>"},{"location":"servers/cloud-automation/#building-the-container-image","title":"\ud83d\udddc\ufe0f Building the Container Image","text":"<p>The project uses a <code>Containerfile</code> to define the container image. You can build the image using either Podman or Docker via the Makefile targets.</p> <p>An optional paramater of <code>IBMCLOUD_PLUGINS=one,two,three</code> can be added to the following build commands. All plugins will be installed if this is not provided.</p> <ul> <li> <p>Using Podman (Production image):</p> <pre><code>make podman\n</code></pre> </li> <li> <p>Using Podman (Development image):</p> <pre><code>make podman-dev\n</code></pre> </li> <li> <p>Using Docker (Production image):</p> <pre><code>make docker\n</code></pre> </li> <li> <p>Using Docker (Development image):</p> <pre><code>make docker-dev\n</code></pre> </li> </ul>"},{"location":"servers/cloud-automation/#running-the-container-with-an-mcp-client","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container with an MCP Client","text":"<pre><code>{\n    \"mcpServers\": {\n        \"ibmcloud-core\": {\n            \"command\": \"/opt/podman/bin/podman\",\n            \"args\": [\n                \"run\",\n                \"--platform=linux/arm64\",\n                \"-p\",\n                \"4444:4444\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"IBMCLOUD_API_KEY\",\n                \"-e\",\n                \"IBMCLOUD_MCP_TOOLS\",\n                \"ibmcloud-mcpserver/ibmcloud-mcpserver\"\n            ],\n            \"env\": {\n                \"IBMCLOUD_API_KEY\": \"&lt;Your API key\",\n                \"IBMCLOUD_MCP_TOOLS\": \"comma,separated,list,of,tools,to,enable\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"servers/cloud-automation/#running-the-container-locally","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container Locally","text":"<p>You can run the built container image locally using the <code>make</code> targets for Podman or Docker.</p> <p>Ensure you have a <code>.env</code> file in the project root. Copy <code>.env.example</code> to <code>.env</code> and set the values.</p> <ul> <li> <p>Running with Podman (HTTP on port 4444):</p> <pre><code>make podman-run\n</code></pre> </li> <li> <p>Running with Podman (HTTPS on port 4444):</p> <pre><code>make podman-run-ssl\n</code></pre> </li> <li> <p>Running with Docker (HTTP on port 4444):</p> <pre><code>make docker-run\n</code></pre> </li> <li> <p>Running with Docker (HTTPS on port 4444):</p> <pre><code>make docker-run-ssl\n</code></pre> </li> </ul>"},{"location":"servers/cloud-automation/#stopping-the-container","title":"\u270b\ud83c\udffc Stopping the Container","text":"<p>Stop and remove the running container instance:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-stop\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-stop\n</code></pre> </li> </ul>"},{"location":"servers/cloud-automation/#testing-the-container","title":"\ud83e\uddea Testing the Container","text":"<p>Use <code>curl</code> to quickly test the running container endpoint:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-test\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-test\n</code></pre> </li> </ul>"},{"location":"servers/cloud-automation/#vulnerability-scanning","title":"\ud83d\udc6e\ud83c\udffc Vulnerability Scanning","text":"<p>The Makefile includes targets for scanning your <code>Containerfile</code> and built images for vulnerabilities and best practices.</p> <ul> <li> <p>Scan image for CVEs (HIGH/CRITICAL) using Trivy:</p> <pre><code>make trivy\n</code></pre> <p>Requires Podman socket enabled (<code>systemctl --user enable --now podman.socket</code>)</p> </li> <li> <p>Lint container image using Dockle:</p> <pre><code>make dockle\n</code></pre> </li> <li> <p>Lint Containerfile(s) using Hadolint:</p> <pre><code>make hadolint\n</code></pre> </li> </ul>"},{"location":"servers/cloud-automation/#deployment-to-ibm-cloud-code-engine","title":"\u2601\ufe0f Deployment to IBM Cloud Code Engine","text":"<p>This project includes Makefile targets to help you deploy the container image to IBM Cloud Code Engine.</p> <ol> <li> <p>Configure Environment Variables:</p> <p>Create a <code>.env.ce</code> file in the project root and define the necessary IBM Cloud Code Engine configuration variables. Copy <code>.env.ce.example</code> to <code>.env.ce</code> and set the values.</p> </li> <li> <p>Check Environment Variables:</p> <pre><code>make ibmcloud-check-env\n</code></pre> </li> <li> <p>Install IBM Cloud CLI and Plugins (if needed):</p> <pre><code>make ibmcloud-cli-install\n</code></pre> </li> <li> <p>Log in to IBM Cloud:</p> <pre><code>make ibmcloud-login\n</code></pre> </li> <li> <p>Target Code Engine Project:</p> <pre><code>make ibmcloud-ce-login\n</code></pre> </li> <li> <p>Build (if not already built) and Tag the Image:</p> <pre><code>make podman # or docker\nmake ibmcloud-tag\n</code></pre> </li> <li> <p>Push the Image to IBM Container Registry:</p> <pre><code>make ibmcloud-push\n</code></pre> </li> <li> <p>Deploy/Update the Application in Code Engine:</p> <pre><code>make ibmcloud-deploy\n</code></pre> </li> <li> <p>Stream Logs:</p> <pre><code>make ibmcloud-ce-logs\n</code></pre> </li> <li> <p>Get Application Status:</p> <pre><code>make ibmcloud-ce-status\n</code></pre> </li> <li> <p>Delete the Application:</p> <pre><code>make ibmcloud-ce-rm\n</code></pre> </li> </ol>"},{"location":"servers/cloud-automation/#getting-help","title":"Getting Help","text":"<p>Run the default <code>make</code> target or <code>make help</code> to see a list of all available commands and their descriptions:</p> <pre><code>make help\n</code></pre>"},{"location":"servers/core/","title":"IBMCloud MCP Server - Core","text":"<p>This project provides a Model Context Protocol (MCP) server for IBM Cloud core tools.</p>"},{"location":"servers/core/#configurations","title":"\u2699\ufe0f Configurations","text":"<p>The following example MCP configurations can be found in the <code>configs</code> folder to help get started with code engine use cases:</p> <ul> <li>mcp.all-tools.json - By not specifying an mcp-tools filter argument, all (1000+!) tools will be exposed to the mcp host application.  This can be useful for understanding the names.  However, the large number of tools will exceed the context window size of LLM's, so this config is only useful for debugging.</li> <li>mcp.account_catalog.json - Tools commonly used when working with Accounts and Users</li> <li>mcp.catalog.json - Tools for working with services and offerings in the IBM Cloud catalog.</li> <li>mcp.assist.json - Tool to invoke the IBM Cloud Assistant that has been trained on all the IBM Cloud documentation to answer IBM Cloud-specific questions.</li> <li>mcp.billing.json - Tools for querying billing and usage information for your accounts.</li> <li>mcp.config.json - Tools for adjusting common configuration settings for IBM Cloud mcp tools, such as display formats.</li> <li>mcp.dev.json - Tools for working with toolchains and pipelines (tekton).</li> <li>mcp.iam-access.json - Tools for working with Identity &amp; Access Management (IAM) Users, Roles, Access groups and API Keys.</li> <li>mcp.iam-policy.json - Tools for working with Identity &amp; Access Management (IAM) Policies.</li> <li>mcp.iam-service.json - Tools for working with Identity &amp; Access Management (IAM) Service Id's, Service groups and Service API Keys.</li> <li>mcp.iam-trusted-profile.json - Tools for working with Identity &amp; Access Management (IAM) Trusted Profiles.</li> <li>mcp.resource-manager.json - Tools for with resources and resource groups, including creating service instances, account-wide resource searching, and resource quotas.</li> </ul>"},{"location":"servers/core/#prompts","title":"\ud83d\udde3\ufe0f Prompts","text":"<p>The MCP Prompt feature is not currently implemented in the IBM Cloud MCP Servers, however, here are some prompts that you can use to get started using the core tools:</p>"},{"location":"servers/core/#common","title":"Common","text":"<ul> <li>\ud83d\udde3\ufe0f Assist me with <code>IBM_CLOUD_TOPIC</code></li> <li>\ud83d\udde3\ufe0f What are the different parts of a CRN?</li> <li>\ud83d\udde3\ufe0f Target the <code>RESOURCE_GROUP_NAME</code> resource group</li> </ul>"},{"location":"servers/core/#resource-management","title":"Resource Management","text":"<ul> <li>\ud83d\udde3\ufe0f What resource groups are in my account?</li> <li>\ud83d\udde3\ufe0f Create a new resource group named <code>RESOURCE_GROUP_NAME</code></li> <li>\ud83d\udde3\ufe0f Delete the resource group named <code>RESOURCE_GROUP_NAME</code></li> <li>\ud83d\udde3\ufe0f Search for resources using the Lucene query, <code>QUERY</code> to filter the search results.</li> <li>\ud83d\udde3\ufe0f What is the RESOURCE ID id for <code>CRN</code>?</li> <li>\ud83d\udde3\ufe0f What is the service type and resource type for <code>CRN</code>?</li> <li>\ud83d\udde3\ufe0f List all service instances</li> <li>\ud83d\udde3\ufe0f Create a tag, <code>TAG</code></li> <li>\ud83d\udde3\ufe0f Add the tag, <code>TAG</code> to the resource <code>CRN</code></li> <li>\ud83d\udde3\ufe0f Delete the tag, <code>TAG</code></li> <li>\ud83d\udde3\ufe0f Show me all resources with the tag, <code>TAG</code></li> </ul>"},{"location":"servers/core/#catalog","title":"Catalog","text":"<ul> <li>\ud83d\udde3\ufe0f Show all services in the catalog having to do with <code>TOPIC</code></li> </ul>"},{"location":"servers/core/#identity-access-managment","title":"Identity &amp; Access Managment","text":"<ul> <li>\ud83d\udde3\ufe0f List the access groups in this account.</li> <li>\ud83d\udde3\ufe0f Add <code>EMAIL</code> to <code>ACCESS_GROUP_NAME</code></li> <li>\ud83d\udde3\ufe0f Remove <code>EMAIL</code> from the <code>ACCESS_GROUP_NAME</code> access group</li> <li>\ud83d\udde3\ufe0f Create a new api-key for accessing my services.</li> <li>\ud83d\udde3\ufe0f Create a service id group, <code>name</code> that will be used for <code>purpose - Eg. Service Id's that represent Agents</code>.</li> <li>\ud83d\udde3\ufe0f Create a service id for<code>SERVICE_ID</code> as part of the service id group <code>SERVICE_ID_GROUP_NAME</code></li> <li>\ud83d\udde3\ufe0f Create a new access group for <code>Reader|Writer|Manager|Viewer...</code> access to <code>SERVICE1,SERVICE2...</code>. Assign the <code>SERVICE_ID_NAME|SERVICE_ID_GROUP_NAME</code> to the access group.</li> <li>\ud83d\udde3\ufe0f Assign <code>email1,email2,...</code> to access group <code>ACCESS_GROUP_NAME</code></li> <li>\ud83d\udde3\ufe0f Delete the service id,<code>SERVICE_ID</code></li> <li>\ud83d\udde3\ufe0f Delete the access group, <code>ACCESS_GROUP</code> name</li> </ul>"},{"location":"servers/core/#accounts","title":"Accounts","text":"<ul> <li>\ud83d\udde3\ufe0f Invite <code>EMAIL</code> to this account</li> <li>\ud83d\udde3\ufe0f Disable the user <code>EMAIL</code> in this account</li> <li>\ud83d\udde3\ufe0f List the users in this account</li> <li>\ud83d\udde3\ufe0f What other accounts do I have access to?</li> </ul>"},{"location":"servers/core/#billing-usage","title":"Billing &amp; Usage","text":"<p>\ud83d\udde3\ufe0f Show me a usage summary for the last month. \ud83d\udde3\ufe0f Show me resource usage costs for the last week.</p>"},{"location":"servers/core/#prerequisites","title":"\ud83e\uddfe Prerequisites","text":"<p>To build, run, and deploy this project, you will need the following installed:</p> <ul> <li><code>make</code></li> <li>Containerization tool: <code>podman</code> or <code>docker</code></li> <li><code>curl</code> (for testing)</li> <li><code>hadolint</code> (for linting Containerfiles)</li> <li><code>dockle</code> (for linting container images)</li> <li><code>trivy</code> (for scanning container images for vulnerabilities)</li> <li>IBM Cloud CLI with <code>container-registry</code> and <code>code-engine</code> plugins</li> </ul>"},{"location":"servers/core/#building-the-container-image","title":"\ud83d\udddc\ufe0f Building the Container Image","text":"<p>The project uses a <code>Containerfile</code> to define the container image. You can build the image using either Podman or Docker via the Makefile targets.</p> <p>An optional paramater of <code>IBMCLOUD_PLUGINS=one,two,three</code> can be added to the following build commands. All plugins will be installed if this is not provided.</p> <ul> <li> <p>Using Podman (Production image):</p> <pre><code>make podman\n</code></pre> </li> <li> <p>Using Docker (Production image):</p> <pre><code>make docker\n</code></pre> </li> </ul>"},{"location":"servers/core/#running-the-container-with-an-mcp-client","title":"Running the Container with an MCP Client","text":"<pre><code>{\n    \"mcpServers\": {\n        \"ibmcloud-core\": {\n            \"command\": \"/opt/podman/bin/podman\",\n            \"args\": [\n                \"run\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"IBMCLOUD_API_KEY\",\n                \"-e\",\n                \"IBMCLOUD_MCP_TOOLS\",\n                \"ibmcloud-mcpserver/ibmcloud-mcpserver\"\n            ],\n            \"env\": {\n                \"IBMCLOUD_API_KEY\": \"&lt;Your API key\",\n                \"IBMCLOUD_MCP_TOOLS\": \"comma,separated,list,of,tools,to,enable\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"servers/core/#running-the-container-locally","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container Locally","text":"<p>You can run the built container image locally using the <code>make</code> targets for Podman or Docker.</p> <p>Ensure you have a <code>.env</code> file in the project root. Copy <code>.env.example</code> to <code>.env</code> and set the values.</p> <ul> <li> <p>Running with Podman (HTTP on port 4444):</p> <pre><code>make podman-run\n</code></pre> </li> <li> <p>Running with Podman (HTTPS on port 4444):</p> <pre><code>make podman-run-ssl\n</code></pre> </li> <li> <p>Running with Docker (HTTP on port 4444):</p> <pre><code>make docker-run\n</code></pre> </li> <li> <p>Running with Docker (HTTPS on port 4444):</p> <pre><code>make docker-run-ssl\n</code></pre> </li> </ul>"},{"location":"servers/core/#stopping-the-container","title":"\u270b\ud83c\udffc Stopping the Container","text":"<p>Stop and remove the running container instance:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-stop\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-stop\n</code></pre> </li> </ul>"},{"location":"servers/core/#testing-the-container","title":"\ud83e\uddea Testing the Container","text":"<p>Use <code>curl</code> to quickly test the running container endpoint:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-test\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-test\n</code></pre> </li> </ul>"},{"location":"servers/core/#security-scanning","title":"\ud83d\udc6e\ud83c\udffc Security Scanning","text":"<p>The Makefile includes targets for scanning your <code>Containerfile</code> and built images for vulnerabilities and best practices.</p> <ul> <li> <p>Scan image for CVEs (HIGH/CRITICAL) using Trivy:</p> <pre><code>make trivy\n</code></pre> <p>Requires Podman socket enabled (<code>systemctl --user enable --now podman.socket</code>)</p> </li> <li> <p>Lint container image using Dockle:</p> <pre><code>make dockle\n</code></pre> </li> <li> <p>Lint Containerfile(s) using Hadolint:</p> <pre><code>make hadolint\n</code></pre> </li> </ul>"},{"location":"servers/core/#deployment-to-ibm-cloud-code-engine","title":"\u2601\ufe0f Deployment to IBM Cloud Code Engine","text":"<p>This project includes Makefile targets to help you deploy the container image to IBM Cloud Code Engine.</p> <ol> <li> <p>Configure Environment Variables:</p> <p>Create a <code>.env.ce</code> file in the project root and define the necessary IBM Cloud Code Engine configuration variables. Copy <code>.env.ce.example</code> to <code>.env.ce</code> and set the values.</p> </li> <li> <p>Check Environment Variables:</p> <pre><code>make ibmcloud-check-env\n</code></pre> </li> <li> <p>Install IBM Cloud CLI and Plugins (if needed):</p> <pre><code>make ibmcloud-cli-install\n</code></pre> </li> <li> <p>Log in to IBM Cloud:</p> <pre><code>make ibmcloud-login\n</code></pre> </li> <li> <p>Target Code Engine Project:</p> <pre><code>make ibmcloud-ce-login\n</code></pre> </li> <li> <p>Build (if not already built) and Tag the Image:</p> <pre><code>make podman # or docker\nmake ibmcloud-tag\n</code></pre> </li> <li> <p>Push the Image to IBM Container Registry:</p> <pre><code>make ibmcloud-push\n</code></pre> </li> <li> <p>Deploy/Update the Application in Code Engine:</p> <pre><code>make ibmcloud-deploy\n</code></pre> </li> <li> <p>Stream Logs:</p> <pre><code>make ibmcloud-ce-logs\n</code></pre> </li> <li> <p>Get Application Status:</p> <pre><code>make ibmcloud-ce-status\n</code></pre> </li> <li> <p>Delete the Application:</p> <pre><code>make ibmcloud-ce-rm\n</code></pre> </li> </ol>"},{"location":"servers/core/#getting-help","title":"\ud83d\ude4b\ud83c\udfff\u200d\u2640\ufe0f Getting Help","text":"<p>Run the default <code>make</code> target or <code>make help</code> to see a list of all available commands and their descriptions:</p> <pre><code>make help\n</code></pre>"},{"location":"servers/kubernetes/","title":"IBMCloud MCP Server - Kubernetes and OpenShift","text":"<p>This project provides a Model Context Protocol (MCP) server with tools for kubernetes-based services on IBM Cloud including Kubernetes &amp; OpenShift clusters.</p>"},{"location":"servers/kubernetes/#configurations","title":"\u2699\ufe0f Configurations","text":"<p>The following example MCP configurations can be found in the <code>configs</code> folder to help get started with code engine use cases:</p> <ul> <li>mcp.ks.json - Tools commonly used when working with Kubernetes and OpenShift clusters</li> </ul> <p>Each of the above configurations also includes the following essential tools:</p> <ul> <li><code>project_*</code> - Working with Code Engine projects and setting the current Code Engine project context for code engine tools.</li> <li><code>buildruns_*</code> - Working with Code Engine builds and logs</li> <li><code>assist</code> - Detailed IBM Cloud Assistance \"Assist me with IBMCLOUD_TOPIC...\"</li> <li><code>resource-groups</code> - Getting lists of the available resource groups</li> <li><code>catalog_locations</code> - Getting available regions</li> <li><code>target</code> - Change the account, resource group, region or cloud API endpoint being used as the current working context for tools.</li> </ul>"},{"location":"servers/kubernetes/#prompts","title":"\ud83d\udde3\ufe0f Prompts","text":"<p>The MCP Prompt feature is not currently implemented in the IBM Cloud MCP Servers, however, here are some prompts that you can  use to get started using the tools:</p>"},{"location":"servers/kubernetes/#clusters","title":"\ud83d\udce6 Clusters","text":"<ul> <li>\ud83d\udde3\ufe0f Show me a list of clusters</li> <li> <p>\ud83d\udde3\ufe0f Show available cluster locations</p> </li> <li> <p>\ud83d\udea7 Work in progress \ud83d\udea7</p> </li> <li>\ud83d\udde3\ufe0f Create a 3 zone OpenShift cluster in <code>VPC_NAME</code>.</li> </ul>"},{"location":"servers/kubernetes/#common","title":"Common","text":"<ul> <li>\ud83d\udde3\ufe0f Assist me with <code>IBM_CLOUD_TOPIC</code></li> <li>\ud83d\udde3\ufe0f What resource groups are in my account?</li> <li>\ud83d\udde3\ufe0f Target the <code>RESOURCE_GROUP_NAME</code> resource group</li> </ul> <p>NOTE: The above commands are from the core set of tools and included in the code engine configuration examples above.  There are many other core commands for working with access, accounts, users, services, resource searching, etc. that can be used simply by adding the tool names to the config.</p>"},{"location":"servers/kubernetes/#prerequisites","title":"\ud83e\uddfe Prerequisites","text":"<p>To build, run, and deploy this project, you will need the following installed:</p> <ul> <li><code>make</code></li> <li>Containerization tool: <code>podman</code> or <code>docker</code></li> <li><code>curl</code> (for testing)</li> <li><code>hadolint</code> (for linting Containerfiles)</li> <li><code>dockle</code> (for linting container images)</li> <li><code>trivy</code> (for scanning container images for vulnerabilities)</li> <li>IBM Cloud CLI with <code>container-registry</code> and <code>container-service</code> plugins</li> </ul>"},{"location":"servers/kubernetes/#building-the-container-image","title":"\ud83d\udddc\ufe0f Building the Container Image","text":"<p>The project uses a <code>Containerfile</code> to define the container image. You can build the image using either Podman or Docker via the Makefile targets.</p> <p>An optional paramater of <code>IBMCLOUD_PLUGINS=one,two,three</code> can be added to the following build commands. All plugins will be installed if this is not provided.</p> <ul> <li> <p>Using Podman (Production image):</p> <pre><code>make podman\n</code></pre> </li> <li> <p>Using Podman (Development image):</p> <pre><code>make podman-dev\n</code></pre> </li> <li> <p>Using Docker (Production image):</p> <pre><code>make docker\n</code></pre> </li> <li> <p>Using Docker (Development image):</p> <pre><code>make docker-dev\n</code></pre> </li> </ul>"},{"location":"servers/kubernetes/#running-the-container-with-an-mcp-client","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container with an MCP Client","text":"<pre><code>{\n    \"mcpServers\": {\n        \"ibmcloud-core\": {\n            \"command\": \"/opt/podman/bin/podman\",\n            \"args\": [\n                \"run\",\n                \"--platform=linux/arm64\",\n                \"-p\",\n                \"4444:4444\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"IBMCLOUD_API_KEY\",\n                \"-e\",\n                \"IBMCLOUD_MCP_TOOLS\",\n                \"ibmcloud-mcpserver/ibmcloud-mcpserver\"\n            ],\n            \"env\": {\n                \"IBMCLOUD_API_KEY\": \"&lt;Your API key\",\n                \"IBMCLOUD_MCP_TOOLS\": \"comma,separated,list,of,tools,to,enable\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"servers/kubernetes/#running-the-container-locally","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container Locally","text":"<p>You can run the built container image locally using the <code>make</code> targets for Podman or Docker.</p> <p>Ensure you have a <code>.env</code> file in the project root. Copy <code>.env.example</code> to <code>.env</code> and set the values.</p> <ul> <li> <p>Running with Podman (HTTP on port 4444):</p> <pre><code>make podman-run\n</code></pre> </li> <li> <p>Running with Podman (HTTPS on port 4444):</p> <pre><code>make podman-run-ssl\n</code></pre> </li> <li> <p>Running with Docker (HTTP on port 4444):</p> <pre><code>make docker-run\n</code></pre> </li> <li> <p>Running with Docker (HTTPS on port 4444):</p> <pre><code>make docker-run-ssl\n</code></pre> </li> </ul>"},{"location":"servers/kubernetes/#stopping-the-container","title":"\u270b\ud83c\udffc Stopping the Container","text":"<p>Stop and remove the running container instance:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-stop\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-stop\n</code></pre> </li> </ul>"},{"location":"servers/kubernetes/#testing-the-container","title":"\ud83e\uddea Testing the Container","text":"<p>Use <code>curl</code> to quickly test the running container endpoint:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-test\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-test\n</code></pre> </li> </ul>"},{"location":"servers/kubernetes/#vulnerability-scanning","title":"\ud83d\udc6e\ud83c\udffc Vulnerability Scanning","text":"<p>The Makefile includes targets for scanning your <code>Containerfile</code> and built images for vulnerabilities and best practices.</p> <ul> <li> <p>Scan image for CVEs (HIGH/CRITICAL) using Trivy:</p> <pre><code>make trivy\n</code></pre> <p>Requires Podman socket enabled (<code>systemctl --user enable --now podman.socket</code>)</p> </li> <li> <p>Lint container image using Dockle:</p> <pre><code>make dockle\n</code></pre> </li> <li> <p>Lint Containerfile(s) using Hadolint:</p> <pre><code>make hadolint\n</code></pre> </li> </ul>"},{"location":"servers/kubernetes/#deployment-to-ibm-cloud-code-engine","title":"\u2601\ufe0f Deployment to IBM Cloud Code Engine","text":"<p>This project includes Makefile targets to help you deploy the container image to IBM Cloud Code Engine.</p> <ol> <li> <p>Configure Environment Variables:</p> <p>Create a <code>.env.ce</code> file in the project root and define the necessary IBM Cloud Code Engine configuration variables. Copy <code>.env.ce.example</code> to <code>.env.ce</code> and set the values.</p> </li> <li> <p>Check Environment Variables:</p> <pre><code>make ibmcloud-check-env\n</code></pre> </li> <li> <p>Install IBM Cloud CLI and Plugins (if needed):</p> <pre><code>make ibmcloud-cli-install\n</code></pre> </li> <li> <p>Log in to IBM Cloud:</p> <pre><code>make ibmcloud-login\n</code></pre> </li> <li> <p>Target Code Engine Project:</p> <pre><code>make ibmcloud-ce-login\n</code></pre> </li> <li> <p>Build (if not already built) and Tag the Image:</p> <pre><code>make podman # or docker\nmake ibmcloud-tag\n</code></pre> </li> <li> <p>Push the Image to IBM Container Registry:</p> <pre><code>make ibmcloud-push\n</code></pre> </li> <li> <p>Deploy/Update the Application in Code Engine:</p> <pre><code>make ibmcloud-deploy\n</code></pre> </li> <li> <p>Stream Logs:</p> <pre><code>make ibmcloud-ce-logs\n</code></pre> </li> <li> <p>Get Application Status:</p> <pre><code>make ibmcloud-ce-status\n</code></pre> </li> <li> <p>Delete the Application:</p> <pre><code>make ibmcloud-ce-rm\n</code></pre> </li> </ol>"},{"location":"servers/kubernetes/#getting-help","title":"Getting Help","text":"<p>Run the default <code>make</code> target or <code>make help</code> to see a list of all available commands and their descriptions:</p> <pre><code>make help\n</code></pre>"},{"location":"servers/serverless/","title":"IBMCloud MCP Server - Serverless","text":"<p>This project provides a Model Context Protocol (MCP) server with tools for serverless computing using Code Engine resources including Projects, Apps, Functions and Jobs.</p>"},{"location":"servers/serverless/#configurations","title":"\u2699\ufe0f Configurations","text":"<p>The following example MCP configurations can be found in the <code>configs</code> folder to help get started with code engine use cases:</p> <ul> <li>mcp.code_engine_apps.json - Tools commonly used when working with Code Engine Applications</li> <li>mcp.code_engine_functions.json - Tools commonly used when working with Code Engine Functions</li> <li>mcp.code_engine_jobs.json - Tools commonly used when working with Code Engine Jobs</li> </ul> <p>Each of these configurations also includes the following essential tools:</p> <ul> <li><code>project_*</code> - Working with Code Engine projects and setting the current Code Engine project context for code engine tools.</li> <li><code>buildruns_*</code> - Working with Code Engine builds and logs</li> <li><code>assist</code> - Detailed IBM Cloud Assistance \"Assist me with IBMCLOUD_TOPIC...\"</li> <li><code>resource-groups</code> - Getting lists of the available resource groups</li> <li><code>catalog_locations</code> - Getting available regions</li> <li><code>target</code> - Change the account, resource group, region or cloud API endpoint being used as the current working context for tools.</li> </ul>"},{"location":"servers/serverless/#prompts","title":"\ud83d\udde3\ufe0f Prompts","text":"<p>The MCP Prompt feature is not currently implemented in the IBM Cloud MCP Servers, however, here are some prompts that you can  use to get started using the tools:</p>"},{"location":"servers/serverless/#common","title":"Common","text":"<ul> <li>\ud83d\udde3\ufe0f Assist me with <code>IBM_CLOUD_TOPIC</code></li> <li>\ud83d\udde3\ufe0f What resource groups are in my account?</li> <li>\ud83d\udde3\ufe0f Target the <code>RESOURCE_GROUP_NAME</code> resource group</li> <li>\ud83d\udde3\ufe0f List all code engine projects</li> <li>\ud83d\udde3\ufe0f Select the <code>CODE_ENGINE_PROJECT_NAME</code> project to work with</li> </ul> <p>NOTE: The above commands are from the core set of tools and included in the code engine configuration examples above.  There are many other core commands for working with access, accounts, users, services, resource searching, etc. that can be used simply by adding the tool names to the config.</p>"},{"location":"servers/serverless/#apps","title":"\ud83d\udce6 Apps","text":"<ul> <li>\ud83d\udde3\ufe0f Show the apps in this project in table format</li> <li>\ud83d\udde3\ufe0f What url can I test <code>APP_NAME</code> on?</li> <li>\ud83d\udde3\ufe0f Which apps are having problems?</li> <li>\ud83d\udde3\ufe0f What's wrong with <code>APP_NAME</code>?</li> <li>\ud83d\udde3\ufe0f I have a containerized application in this github repo: <code>GITHUB_REPO</code>. Help me build and deploy it on code engine.</li> </ul>"},{"location":"servers/serverless/#functions","title":"\u019b Functions","text":"<ul> <li>\ud83d\udde3\ufe0f Show the functions in table format</li> <li>\ud83d\udde3\ufe0f What url can I test <code>FUNCTION_NAME</code> on?</li> <li>\ud83d\udde3\ufe0f What's wrong with <code>FUNCTION_NAME</code>?</li> <li>\ud83d\udde3\ufe0f What does an example Python function look like for Code Engine?</li> <li>\ud83d\udde3\ufe0f I have a python function in this github repo: <code>GITHUB_REPO</code>. Help me build and deploy it on code engine.</li> </ul>"},{"location":"servers/serverless/#prerequisites","title":"\ud83e\uddfe Prerequisites","text":"<p>To build, run, and deploy this project, you will need the following installed:</p> <ul> <li><code>make</code></li> <li>Containerization tool: <code>podman</code> or <code>docker</code></li> <li><code>curl</code> (for testing)</li> <li><code>hadolint</code> (for linting Containerfiles)</li> <li><code>dockle</code> (for linting container images)</li> <li><code>trivy</code> (for scanning container images for vulnerabilities)</li> <li>IBM Cloud CLI with <code>container-registry</code> and <code>code-engine</code> plugins</li> </ul>"},{"location":"servers/serverless/#building-the-container-image","title":"\ud83d\udddc\ufe0f Building the Container Image","text":"<p>The project uses a <code>Containerfile</code> to define the container image. You can build the image using either Podman or Docker via the Makefile targets.</p> <p>An optional paramater of <code>IBMCLOUD_PLUGINS=one,two,three</code> can be added to the following build commands. All plugins will be installed if this is not provided.</p> <ul> <li> <p>Using Podman (Production image):</p> <pre><code>make podman\n</code></pre> </li> <li> <p>Using Podman (Development image):</p> <pre><code>make podman-dev\n</code></pre> </li> <li> <p>Using Docker (Production image):</p> <pre><code>make docker\n</code></pre> </li> <li> <p>Using Docker (Development image):</p> <pre><code>make docker-dev\n</code></pre> </li> </ul>"},{"location":"servers/serverless/#running-the-container-with-an-mcp-client","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container with an MCP Client","text":"<pre><code>{\n    \"mcpServers\": {\n        \"ibmcloud-core\": {\n            \"command\": \"/opt/podman/bin/podman\",\n            \"args\": [\n                \"run\",\n                \"--platform=linux/arm64\",\n                \"-p\",\n                \"4444:4444\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"IBMCLOUD_API_KEY\",\n                \"-e\",\n                \"IBMCLOUD_MCP_TOOLS\",\n                \"ibmcloud-mcpserver/ibmcloud-mcpserver\"\n            ],\n            \"env\": {\n                \"IBMCLOUD_API_KEY\": \"&lt;Your API key\",\n                \"IBMCLOUD_MCP_TOOLS\": \"comma,separated,list,of,tools,to,enable\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"servers/serverless/#running-the-container-locally","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container Locally","text":"<p>You can run the built container image locally using the <code>make</code> targets for Podman or Docker.</p> <p>Ensure you have a <code>.env</code> file in the project root. Copy <code>.env.example</code> to <code>.env</code> and set the values.</p> <ul> <li> <p>Running with Podman (HTTP on port 4444):</p> <pre><code>make podman-run\n</code></pre> </li> <li> <p>Running with Podman (HTTPS on port 4444):</p> <pre><code>make podman-run-ssl\n</code></pre> </li> <li> <p>Running with Docker (HTTP on port 4444):</p> <pre><code>make docker-run\n</code></pre> </li> <li> <p>Running with Docker (HTTPS on port 4444):</p> <pre><code>make docker-run-ssl\n</code></pre> </li> </ul>"},{"location":"servers/serverless/#stopping-the-container","title":"\u270b\ud83c\udffc Stopping the Container","text":"<p>Stop and remove the running container instance:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-stop\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-stop\n</code></pre> </li> </ul>"},{"location":"servers/serverless/#testing-the-container","title":"\ud83e\uddea Testing the Container","text":"<p>Use <code>curl</code> to quickly test the running container endpoint:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-test\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-test\n</code></pre> </li> </ul>"},{"location":"servers/serverless/#vulnerability-scanning","title":"\ud83d\udc6e\ud83c\udffc Vulnerability Scanning","text":"<p>The Makefile includes targets for scanning your <code>Containerfile</code> and built images for vulnerabilities and best practices.</p> <ul> <li> <p>Scan image for CVEs (HIGH/CRITICAL) using Trivy:</p> <pre><code>make trivy\n</code></pre> <p>Requires Podman socket enabled (<code>systemctl --user enable --now podman.socket</code>)</p> </li> <li> <p>Lint container image using Dockle:</p> <pre><code>make dockle\n</code></pre> </li> <li> <p>Lint Containerfile(s) using Hadolint:</p> <pre><code>make hadolint\n</code></pre> </li> </ul>"},{"location":"servers/serverless/#deployment-to-ibm-cloud-code-engine","title":"\u2601\ufe0f Deployment to IBM Cloud Code Engine","text":"<p>This project includes Makefile targets to help you deploy the container image to IBM Cloud Code Engine.</p> <ol> <li> <p>Configure Environment Variables:</p> <p>Create a <code>.env.ce</code> file in the project root and define the necessary IBM Cloud Code Engine configuration variables. Copy <code>.env.ce.example</code> to <code>.env.ce</code> and set the values.</p> </li> <li> <p>Check Environment Variables:</p> <pre><code>make ibmcloud-check-env\n</code></pre> </li> <li> <p>Install IBM Cloud CLI and Plugins (if needed):</p> <pre><code>make ibmcloud-cli-install\n</code></pre> </li> <li> <p>Log in to IBM Cloud:</p> <pre><code>make ibmcloud-login\n</code></pre> </li> <li> <p>Target Code Engine Project:</p> <pre><code>make ibmcloud-ce-login\n</code></pre> </li> <li> <p>Build (if not already built) and Tag the Image:</p> <pre><code>make podman # or docker\nmake ibmcloud-tag\n</code></pre> </li> <li> <p>Push the Image to IBM Container Registry:</p> <pre><code>make ibmcloud-push\n</code></pre> </li> <li> <p>Deploy/Update the Application in Code Engine:</p> <pre><code>make ibmcloud-deploy\n</code></pre> </li> <li> <p>Stream Logs:</p> <pre><code>make ibmcloud-ce-logs\n</code></pre> </li> <li> <p>Get Application Status:</p> <pre><code>make ibmcloud-ce-status\n</code></pre> </li> <li> <p>Delete the Application:</p> <pre><code>make ibmcloud-ce-rm\n</code></pre> </li> </ol>"},{"location":"servers/serverless/#getting-help","title":"Getting Help","text":"<p>Run the default <code>make</code> target or <code>make help</code> to see a list of all available commands and their descriptions:</p> <pre><code>make help\n</code></pre>"},{"location":"servers/vpc/","title":"IBMCloud MCP Server - Virtual Private Cloud (VPC)","text":"<p>This project provides a Model Context Protocol (MCP) server for tools for working with VPC resources.</p>"},{"location":"servers/vpc/#configurations","title":"\u2699\ufe0f Configurations","text":"<p>The following example MCP configurations can be found in the <code>configs</code> folder to help get started with code engine use cases:</p> <ul> <li>mcp.vpc-backup.json - Tools commonly used when working with backups for VPC resources</li> <li>mcp.vpc-baremetal.json - Tools commonly used when working with bare metal servers</li> <li>mcp.vpc-cluster.json - Tools commonly used when working with VPC Cluster groups</li> <li>mcp.vpc-instance.json - Tools commonly used when working with Virtual Server Instances</li> <li>mcp.vpc-lb.json - Tools commonly used when working with Virtual Server load balancers</li> <li>mcp.vpc-network.json - Tools commonly used when working with Virtual Server network resources</li> <li>mcp.vpc-sec.json - Tools commonly used when securing Virtual Private Cloud resources</li> <li>mcp.vpc-volume.json - Tools commonly used when working with Virtual Server storage volumes</li> </ul> <p>Each of these configurations also includes the following essential tools:</p> <ul> <li><code>project_*</code> - Working with Code Engine projects and setting the current Code Engine project context for code engine tools.</li> <li><code>buildruns_*</code> - Working with Code Engine builds and logs</li> <li><code>assist</code> - Detailed IBM Cloud Assistance \"Assist me with IBMCLOUD_TOPIC...\"</li> <li><code>resource-groups</code> - Getting lists of the available resource groups</li> <li><code>catalog_locations</code> - Getting available regions</li> <li><code>target</code> - Change the account, resource group, region or cloud API endpoint being used as the current working context for tools.</li> </ul>"},{"location":"servers/vpc/#prompts","title":"\ud83d\udde3\ufe0f Prompts","text":"<p>The MCP Prompt feature is not currently implemented in the IBM Cloud MCP Servers, however, here are some prompts that you can  use to get started using the tools:</p>"},{"location":"servers/vpc/#common","title":"Common","text":"<ul> <li>\ud83d\udde3\ufe0f Assist me with <code>IBM_CLOUD_TOPIC</code></li> <li>\ud83d\udde3\ufe0f What resource groups are in my account?</li> <li>\ud83d\udde3\ufe0f Target the <code>RESOURCE_GROUP_NAME</code> resource group</li> </ul> <p>NOTE: The above commands are from the core set of tools and included in the code engine configuration examples above.  There are many other core commands for working with access, accounts, users, services, resource searching, etc. that can be used simply by adding the tool names to the config.</p>"},{"location":"servers/vpc/#vpc","title":"\ud83d\udce6 VPC","text":"<ul> <li>\ud83d\udde3\ufe0f WORK IN PROGRESS</li> </ul>"},{"location":"servers/vpc/#prerequisites","title":"\ud83e\uddfe Prerequisites","text":"<p>To build, run, and deploy this project, you will need the following installed:</p> <ul> <li><code>make</code></li> <li>Containerization tool: <code>podman</code> or <code>docker</code></li> <li><code>curl</code> (for testing)</li> <li><code>hadolint</code> (for linting Containerfiles)</li> <li><code>dockle</code> (for linting container images)</li> <li><code>trivy</code> (for scanning container images for vulnerabilities)</li> <li>IBM Cloud CLI with <code>container-registry</code> and <code>code-engine</code> plugins</li> </ul>"},{"location":"servers/vpc/#building-the-container-image","title":"\ud83d\udddc\ufe0f Building the Container Image","text":"<p>The project uses a <code>Containerfile</code> to define the container image. You can build the image using either Podman or Docker via the Makefile targets.</p> <p>An optional paramater of <code>IBMCLOUD_PLUGINS=one,two,three</code> can be added to the following build commands. All plugins will be installed if this is not provided.</p> <ul> <li> <p>Using Podman (Production image):</p> <pre><code>make podman\n</code></pre> </li> <li> <p>Using Podman (Development image):</p> <pre><code>make podman-dev\n</code></pre> </li> <li> <p>Using Docker (Production image):</p> <pre><code>make docker\n</code></pre> </li> <li> <p>Using Docker (Development image):</p> <pre><code>make docker-dev\n</code></pre> </li> </ul>"},{"location":"servers/vpc/#running-the-container-with-an-mcp-client","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container with an MCP Client","text":"<pre><code>{\n    \"mcpServers\": {\n        \"ibmcloud-core\": {\n            \"command\": \"/opt/podman/bin/podman\",\n            \"args\": [\n                \"run\",\n                \"--platform=linux/arm64\",\n                \"-p\",\n                \"4444:4444\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"IBMCLOUD_API_KEY\",\n                \"-e\",\n                \"IBMCLOUD_MCP_TOOLS\",\n                \"ibmcloud-mcpserver/ibmcloud-mcpserver\"\n            ],\n            \"env\": {\n                \"IBMCLOUD_API_KEY\": \"&lt;Your API key\",\n                \"IBMCLOUD_MCP_TOOLS\": \"comma,separated,list,of,tools,to,enable\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"servers/vpc/#running-the-container-locally","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f Running the Container Locally","text":"<p>You can run the built container image locally using the <code>make</code> targets for Podman or Docker.</p> <p>Ensure you have a <code>.env</code> file in the project root. Copy <code>.env.example</code> to <code>.env</code> and set the values.</p> <ul> <li> <p>Running with Podman (HTTP on port 4444):</p> <pre><code>make podman-run\n</code></pre> </li> <li> <p>Running with Podman (HTTPS on port 4444):</p> <pre><code>make podman-run-ssl\n</code></pre> </li> <li> <p>Running with Docker (HTTP on port 4444):</p> <pre><code>make docker-run\n</code></pre> </li> <li> <p>Running with Docker (HTTPS on port 4444):</p> <pre><code>make docker-run-ssl\n</code></pre> </li> </ul>"},{"location":"servers/vpc/#stopping-the-container","title":"\u270b\ud83c\udffc Stopping the Container","text":"<p>Stop and remove the running container instance:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-stop\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-stop\n</code></pre> </li> </ul>"},{"location":"servers/vpc/#testing-the-container","title":"\ud83e\uddea Testing the Container","text":"<p>Use <code>curl</code> to quickly test the running container endpoint:</p> <ul> <li> <p>Using Podman:</p> <pre><code>make podman-test\n</code></pre> </li> <li> <p>Using Docker:</p> <pre><code>make docker-test\n</code></pre> </li> </ul>"},{"location":"servers/vpc/#vulnerability-scanning","title":"\ud83d\udc6e\ud83c\udffc Vulnerability Scanning","text":"<p>The Makefile includes targets for scanning your <code>Containerfile</code> and built images for vulnerabilities and best practices.</p> <ul> <li> <p>Scan image for CVEs (HIGH/CRITICAL) using Trivy:</p> <pre><code>make trivy\n</code></pre> <p>Requires Podman socket enabled (<code>systemctl --user enable --now podman.socket</code>)</p> </li> <li> <p>Lint container image using Dockle:</p> <pre><code>make dockle\n</code></pre> </li> <li> <p>Lint Containerfile(s) using Hadolint:</p> <pre><code>make hadolint\n</code></pre> </li> </ul>"},{"location":"servers/vpc/#deployment-to-ibm-cloud-code-engine","title":"\u2601\ufe0f Deployment to IBM Cloud Code Engine","text":"<p>This project includes Makefile targets to help you deploy the container image to IBM Cloud Code Engine.</p> <ol> <li> <p>Configure Environment Variables:</p> <p>Create a <code>.env.ce</code> file in the project root and define the necessary IBM Cloud Code Engine configuration variables. Copy <code>.env.ce.example</code> to <code>.env.ce</code> and set the values.</p> </li> <li> <p>Check Environment Variables:</p> <pre><code>make ibmcloud-check-env\n</code></pre> </li> <li> <p>Install IBM Cloud CLI and Plugins (if needed):</p> <pre><code>make ibmcloud-cli-install\n</code></pre> </li> <li> <p>Log in to IBM Cloud:</p> <pre><code>make ibmcloud-login\n</code></pre> </li> <li> <p>Target Code Engine Project:</p> <pre><code>make ibmcloud-ce-login\n</code></pre> </li> <li> <p>Build (if not already built) and Tag the Image:</p> <pre><code>make podman # or docker\nmake ibmcloud-tag\n</code></pre> </li> <li> <p>Push the Image to IBM Container Registry:</p> <pre><code>make ibmcloud-push\n</code></pre> </li> <li> <p>Deploy/Update the Application in Code Engine:</p> <pre><code>make ibmcloud-deploy\n</code></pre> </li> <li> <p>Stream Logs:</p> <pre><code>make ibmcloud-ce-logs\n</code></pre> </li> <li> <p>Get Application Status:</p> <pre><code>make ibmcloud-ce-status\n</code></pre> </li> <li> <p>Delete the Application:</p> <pre><code>make ibmcloud-ce-rm\n</code></pre> </li> </ol>"},{"location":"servers/vpc/#getting-help","title":"Getting Help","text":"<p>Run the default <code>make</code> target or <code>make help</code> to see a list of all available commands and their descriptions:</p> <pre><code>make help\n</code></pre>"}]}